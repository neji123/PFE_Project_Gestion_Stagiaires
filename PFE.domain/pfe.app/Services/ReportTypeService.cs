using PFE.application.Interfaces;
using PFE.Application.DTOs;
using PFE.Application.Interfaces;
using PFE.domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace PFE.Application.Services
{
    public class ReportTypeService : IReportTypeService
    {
        private readonly IReportTypeRepository _reportTypeRepository;

        public ReportTypeService(IReportTypeRepository reportTypeRepository)
        {
            _reportTypeRepository = reportTypeRepository;
        }

        public async Task<ReportTypeDto> GetByIdAsync(int id)
        {
            var reportType = await _reportTypeRepository.GetByIdAsync(id);
            if (reportType == null)
            {
                throw new Exception("Type de rapport non trouvé");
            }

            return MapToDto(reportType);
        }

        public async Task<IEnumerable<ReportTypeDto>> GetAllAsync()
        {
            var reportTypes = await _reportTypeRepository.GetAllAsync();
            return reportTypes.Select(MapToDto);
        }

        public async Task<IEnumerable<ReportTypeDto>> GetActiveAsync()
        {
            var reportTypes = await _reportTypeRepository.GetActiveAsync();
            return reportTypes.Select(MapToDto);
        }

        public async Task<ReportTypeDto> CreateAsync(CreateReportTypeDto createDto)
        {
            // Vérifier l'unicité du nom
            if (await _reportTypeRepository.ExistsByNameAsync(createDto.Name))
            {
                throw new Exception("Un type de rapport avec ce nom existe déjà");
            }

            // Si aucun ordre d'affichage n'est spécifié, le mettre à la fin
            if (createDto.DisplayOrder <= 0)
            {
                createDto.DisplayOrder = await _reportTypeRepository.GetMaxDisplayOrderAsync() + 1;
            }

            var reportType = new ReportType
            {
                Name = createDto.Name,
                Description = createDto.Description,
                DisplayOrder = createDto.DisplayOrder,
                DaysFromStart = createDto.DaysFromStart,
                IsAutoGenerated = createDto.IsAutoGenerated,
                IsActive = createDto.IsActive,
                IconClass = createDto.IconClass ?? "fa-file",
                Color = createDto.Color ?? "#007bff"
            };

            var createdReportType = await _reportTypeRepository.AddAsync(reportType);
            return MapToDto(createdReportType);
        }

        public async Task<ReportTypeDto> UpdateAsync(int id, UpdateReportTypeDto updateDto)
        {
            var reportType = await _reportTypeRepository.GetByIdAsync(id);
            if (reportType == null)
            {
                throw new Exception("Type de rapport non trouvé");
            }

            // Vérifier l'unicité du nom (exclure l'ID actuel)
            if (await _reportTypeRepository.ExistsByNameAsync(updateDto.Name, id))
            {
                throw new Exception("Un autre type de rapport avec ce nom existe déjà");
            }

            // Mettre à jour les propriétés
            reportType.Name = updateDto.Name;
            reportType.Description = updateDto.Description;
            reportType.DisplayOrder = updateDto.DisplayOrder;
            reportType.DaysFromStart = updateDto.DaysFromStart;
            reportType.IsAutoGenerated = updateDto.IsAutoGenerated;
            reportType.IsActive = updateDto.IsActive;
            reportType.IconClass = updateDto.IconClass ?? "fa-file";
            reportType.Color = updateDto.Color ?? "#007bff";

            await _reportTypeRepository.UpdateAsync(reportType);
            return MapToDto(reportType);
        }

        public async Task<bool> DeleteAsync(int id)
        {
            var reportType = await _reportTypeRepository.GetByIdAsync(id);
            if (reportType == null)
            {
                throw new Exception("Type de rapport non trouvé");
            }

            await _reportTypeRepository.DeleteAsync(reportType);
            return true;
        }

        public async Task<bool> ReorderAsync(int id, int newDisplayOrder)
        {
            var reportType = await _reportTypeRepository.GetByIdAsync(id);
            if (reportType == null)
            {
                throw new Exception("Type de rapport non trouvé");
            }

            reportType.DisplayOrder = newDisplayOrder;
            await _reportTypeRepository.UpdateAsync(reportType);
            return true;
        }

        public async Task InitializeDefaultReportTypesAsync()
        {
            // Vérifier s'il y a déjà des types de rapports
            var existingTypes = await _reportTypeRepository.GetAllAsync();
            if (existingTypes.Any())
            {
                return; // Ne pas réinitialiser s'il y a déjà des types
            }

            // Créer les types de rapports par défaut selon votre liste
            var defaultReportTypes = new List<ReportType>
            {
                new ReportType { Name = "Convention de stage", Description = "Document officiel de convention", DisplayOrder = 1, DaysFromStart = -7, IconClass = "fa-file-contract", Color = "#28a745", IsActive = true },
                new ReportType { Name = "Dépôt document métier", Description = "Document de compréhension du sujet", DisplayOrder = 2, DaysFromStart = 7, IconClass = "fa-briefcase", Color = "#6f42c1", IsActive = true },
                new ReportType { Name = "Plan de travail", Description = "Planning détaillé des tâches", DisplayOrder = 3, DaysFromStart = 14, IconClass = "fa-tasks", Color = "#fd7e14", IsActive = true },
                new ReportType { Name = "Les diagrammes", Description = "Diagrammes UML et techniques", DisplayOrder = 4, DaysFromStart = 30, IconClass = "fa-project-diagram", Color = "#20c997", IsActive = true },
                new ReportType { Name = "Les maquettes", Description = "Maquettes et prototypes", DisplayOrder = 5, DaysFromStart = 45, IconClass = "fa-palette", Color = "#e83e8c", IsActive = true },
                new ReportType { Name = "Journal de bord (1ère partie)", Description = "Suivi hebdomadaire des activités", DisplayOrder = 6, DaysFromStart = 30, IconClass = "fa-book", Color = "#17a2b8", IsActive = true, IsAutoGenerated = true },
                new ReportType { Name = "Présentation mi-terme", Description = "Présentation d'avancement", DisplayOrder = 7, DaysFromStart = 60, IconClass = "fa-presentation", Color = "#ffc107", IsActive = true },
                new ReportType { Name = "Journal de bord (2ème partie)", Description = "Suite du suivi des activités", DisplayOrder = 8, DaysFromStart = 75, IconClass = "fa-book-open", Color = "#17a2b8", IsActive = true, IsAutoGenerated = true },
                new ReportType { Name = "Captures d'interfaces", Description = "Screenshots des interfaces du projet", DisplayOrder = 9, DaysFromStart = 90, IconClass = "fa-camera", Color = "#6c757d", IsActive = true },
                new ReportType { Name = "Rapport final", Description = "Document final de stage", DisplayOrder = 10, DaysFromStart = 105, IconClass = "fa-file-pdf", Color = "#dc3545", IsActive = true },
                new ReportType { Name = "Présentation finale", Description = "Soutenance finale du projet", DisplayOrder = 11, DaysFromStart = 120, IconClass = "fa-chalkboard-teacher", Color = "#007bff", IsActive = true }
            };

            foreach (var reportType in defaultReportTypes)
            {
                await _reportTypeRepository.AddAsync(reportType);
            }
        }

        private ReportTypeDto MapToDto(ReportType reportType)
        {
            return new ReportTypeDto
            {
                Id = reportType.Id,
                Name = reportType.Name,
                Description = reportType.Description,
                DisplayOrder = reportType.DisplayOrder,
                DaysFromStart = reportType.DaysFromStart,
                IsAutoGenerated = reportType.IsAutoGenerated,
                IsActive = reportType.IsActive,
                IconClass = reportType.IconClass,
                Color = reportType.Color,
                CreatedAt = reportType.CreatedAt,
                UpdatedAt = reportType.UpdatedAt
            };
        }
    }
}