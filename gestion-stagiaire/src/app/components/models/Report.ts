// components/models/Report.ts - Version mise à jour
export interface Report {
  id: number;
  title: string;
  description: string;
  submissionDate: Date;
  dueDate?: Date;
  isSubmitted: boolean;
  isApproved: boolean;
  isRejected: boolean;
  feedbackComments?: string;
  status: string;
  
  // Nouveau système avec ReportType dynamique
  reportTypeId: number;
  reportTypeName: string;
  reportTypeDescription?: string;
  reportTypeIconClass?: string;
  reportTypeColor?: string;
  isAutoGenerated?: boolean;
  
  // Informations du stagiaire
  stagiaireId: number;
  stagiaireName: string;
  
  // Informations de l'approbateur
  approverId?: number;
  approverName?: string;
  
  downloadUrl: string;
  stageTimelineId?: number;
  createdAt: Date;
  updatedAt?: Date;
}

export interface ReportUpload {
  stagiaireId: number;
  reportTypeId: number; // Changé de reportType: string vers reportTypeId: number
  title: string;
  description: string;
  file: File;
}

export interface ReportResubmit {
  stagiaireId: number;
  reportTypeId: number; // Changé de reportType: string vers reportTypeId: number
  title: string;
  description: string;
  file: File;
  rejectedReportId: number;
}

export interface ApproveReport {
  feedback: string;
  approverId: number;
}

// Interface pour les statistiques de rapports
export interface ReportStatistics {
  totalReports: number;
  approvedReports: number;
  rejectedReports: number;
  pendingReports: number;
  averageApprovalTime?: number;
}

// Interface pour les métadonnées d'un rapport
export interface ReportMetadata {
  id: number;
  fileName: string;
  fileSize: number;
  mimeType: string;
  uploadedAt: Date;
  lastModified?: Date;
}

// **COMPATIBILITÉ AVEC L'ANCIEN SYSTÈME**
// Gardez cette enum temporairement pour la transition
export enum LegacyReportType {
  ConventionStage = 'ConventionStage',
  PlanTravail = 'PlanTravail',
  JournalBord = 'JournalBord',
  BilanVersion1 = 'BilanVersion1',
  RestitutionOrale = 'RestitutionOrale',
  VisiteMiParcours = 'VisiteMiParcours',
  BilanVersion2 = 'BilanVersion2',
  RapportFinal = 'RapportFinal'
}

// Utilitaire pour mapper l'ancien système vers le nouveau
export class ReportTypeMapper {
  // Mapping des anciens noms vers les nouveaux
  private static legacyToNewMapping: { [key: string]: string } = {
    'ConventionStage': 'Convention de stage',
    'PlanTravail': 'Plan de travail',
    'JournalBord': 'Journal de bord (1ère partie)',
    'BilanVersion1': 'Les maquettes',
    'RestitutionOrale': 'Présentation mi-terme',
    'VisiteMiParcours': 'Journal de bord (2ème partie)',
    'BilanVersion2': 'Captures d\'interfaces',
    'RapportFinal': 'Rapport final'
  };

  // Mapping inverse (nouveau vers ancien)
  private static newToLegacyMapping: { [key: string]: string } = {
    'Convention de stage': 'ConventionStage',
    'Plan de travail': 'PlanTravail',
    'Journal de bord (1ère partie)': 'JournalBord',
    'Les maquettes': 'BilanVersion1',
    'Présentation mi-terme': 'RestitutionOrale',
    'Journal de bord (2ème partie)': 'VisiteMiParcours',
    'Captures d\'interfaces': 'BilanVersion2',
    'Rapport final': 'RapportFinal'
  };

  static getLegacyName(newName: string): string {
    return this.newToLegacyMapping[newName] || newName;
  }

  static getNewName(legacyName: string): string {
    return this.legacyToNewMapping[legacyName] || legacyName;
  }

  static getDisplayName(reportTypeName: string): string {
    // Si c'est un ancien nom, le convertir
    if (this.legacyToNewMapping[reportTypeName]) {
      return this.legacyToNewMapping[reportTypeName];
    }
    // Sinon, retourner tel quel
    return reportTypeName;
  }
}

// Interface étendue pour le rapport avec informations de type
export interface ReportWithType extends Report {
  reportType?: {
    id: number;
    name: string;
    description: string;
    displayOrder: number;
    daysFromStart: number;
    isAutoGenerated: boolean;
    isActive: boolean;
    iconClass: string;
    color: string;
  };
}

// Interface pour les filtres de rapports
export interface ReportFilter {
  stagiaireId?: number;
  reportTypeId?: number;
  isApproved?: boolean;
  isRejected?: boolean;
  dateFrom?: Date;
  dateTo?: Date;
  searchText?: string;
}

// Interface pour les options de tri
export interface ReportSortOptions {
  field: 'submissionDate' | 'title' | 'reportTypeName' | 'stagiaireName';
  direction: 'asc' | 'desc';
}

// Interface pour la pagination
export interface ReportPagination {
  page: number;
  size: number;
  total: number;
  totalPages: number;
}

// Interface pour la réponse paginée
export interface PaginatedReports {
  reports: Report[];
  pagination: ReportPagination;
}