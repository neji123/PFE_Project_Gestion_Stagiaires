// components/reports/report-upload-dialog/report-upload-dialog.component.ts - Version mise à jour
import { Component, Inject, OnInit } from '@angular/core';
import { ReportService } from '../../../services/Report/report.service';
import { ReportTypeService, ReportType } from '../../../services/Report/ReportType/report-type.service';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatSelectModule } from '@angular/material/select';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialogModule } from '@angular/material/dialog';
import { Observable } from 'rxjs';
import { Report, ReportUpload, ReportResubmit } from '../../models/Report';

interface DialogData {
  stagiaireId: number;
  reportTypeId: number; // Nouveau: ID au lieu de string
  reportTypeName?: string; // Pour l'affichage
  stepName: string;
  isResubmission?: boolean;
  rejectedReportId?: number;
}

@Component({
  selector: 'app-report-upload-dialog',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    MatCardModule,
    MatIconModule,
    MatButtonModule,
    MatInputModule,
    MatFormFieldModule,
    MatSnackBarModule,
    MatDialogModule,
    MatProgressSpinnerModule,
    MatTooltipModule,
    MatSelectModule
  ],
  templateUrl: './report-upload-dialog.component.html',
  styleUrl: './report-upload-dialog.component.scss'
})
export class ReportUploadDialogComponent implements OnInit {
  uploadForm: FormGroup;
  isLoading = false;
  selectedFile: File | null = null;
  errorMessage = '';
  
  // Informations sur le type de rapport
  reportType: ReportType | null = null;
  
  constructor(
    public dialogRef: MatDialogRef<ReportUploadDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: DialogData,
    private fb: FormBuilder,
    private reportService: ReportService,
    private reportTypeService: ReportTypeService,
    private snackBar: MatSnackBar
  ) {
    this.uploadForm = this.fb.group({
      title: ['', [Validators.required, Validators.maxLength(100)]],
      description: ['', Validators.maxLength(500)],
      file: [null, Validators.required]
    });
  }

  ngOnInit(): void {
    this.loadReportTypeInfo();
    this.setDefaultTitle();
  }

  // Charger les informations sur le type de rapport
  loadReportTypeInfo(): void {
    if (this.data.reportTypeId) {
      this.reportTypeService.getReportTypeById(this.data.reportTypeId).subscribe({
        next: (reportType) => {
          this.reportType = reportType;
          console.log('Informations du type de rapport chargées:', reportType);
          
          // Mettre à jour le titre par défaut avec le nom exact du type
          this.setDefaultTitle();
        },
        error: (error) => {
          console.error('Erreur lors du chargement du type de rapport:', error);
          // Continuer même si on ne peut pas charger les infos du type
        }
      });
    }
  }

  setDefaultTitle(): void {
    // Proposition d'un titre par défaut basé sur le type de rapport
    const date = new Date().toLocaleDateString('fr-FR');
    let defaultTitle = '';
    
    if (this.reportType) {
      // Utiliser le nom exact du type de rapport
      defaultTitle = `${this.reportType.name} - ${date}`;
    } else if (this.data.reportTypeName) {
      // Utiliser le nom fourni dans les données
      defaultTitle = `${this.data.reportTypeName} - ${date}`;
    } else {
      // Fallback basé sur le nom de l'étape
      defaultTitle = `${this.data.stepName} - ${date}`;
    }
    
    this.uploadForm.patchValue({
      title: defaultTitle
    });
  }

  getDialogTitle(): string {
    const baseTitle = this.data.isResubmission ? 'Soumettre à nouveau' : 'Soumettre un rapport';
    
    if (this.reportType) {
      return `${baseTitle} - ${this.reportType.name}`;
    } else if (this.data.reportTypeName) {
      return `${baseTitle} - ${this.data.reportTypeName}`;
    } else {
      return `${baseTitle} - ${this.data.stepName}`;
    }
  }

  getReportTypeDescription(): string {
    if (this.reportType && this.reportType.description) {
      return this.reportType.description;
    }
    return '';
  }

  isAutoGeneratedReport(): boolean {
    return this.reportType?.isAutoGenerated || false;
  }

  onFileSelected(event: any): void {
    const file = event.target.files[0];
    
    if (file) {
      // Vérifier si c'est un PDF
      if (file.type !== 'application/pdf') {
        this.snackBar.open('Veuillez sélectionner un fichier PDF', 'Fermer', {
          duration: 3000
        });
        this.uploadForm.get('file')?.setErrors({ 'invalidFileType': true });
        return;
      }
      
      // Vérifier la taille du fichier (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        this.snackBar.open('Le fichier est trop volumineux (max 10MB)', 'Fermer', {
          duration: 3000
        });
        this.uploadForm.get('file')?.setErrors({ 'invalidFileSize': true });
        return;
      }
      
      this.selectedFile = file;
      this.uploadForm.patchValue({ file: file });
      this.uploadForm.get('file')?.updateValueAndValidity();
    }
  }

  onSubmit(): void {
    if (this.uploadForm.invalid || !this.selectedFile) {
      return;
    }
    
    this.isLoading = true;
    this.errorMessage = '';
    
    // Utiliser la bonne méthode selon qu'il s'agit d'une re-soumission ou non
    let uploadObservable: Observable<any>;
    
    if (this.data.isResubmission && this.data.rejectedReportId) {
      // Re-soumission avec le nouveau système
      const resubmitData: ReportResubmit = {
        stagiaireId: this.data.stagiaireId,
        reportTypeId: this.data.reportTypeId, // Nouveau: utiliser l'ID
        title: this.uploadForm.value.title,
        description: this.uploadForm.value.description || '',
        file: this.selectedFile,
        rejectedReportId: this.data.rejectedReportId
      };
      
      uploadObservable = this.reportService.resubmitReport(resubmitData);
    } else {
      // Nouveau rapport avec le nouveau système
      const reportData: ReportUpload = {
        stagiaireId: this.data.stagiaireId,
        reportTypeId: this.data.reportTypeId, // Nouveau: utiliser l'ID
        title: this.uploadForm.value.title,
        description: this.uploadForm.value.description || '',
        file: this.selectedFile
      };
      
      uploadObservable = this.reportService.uploadReport(reportData);
    }
    
    uploadObservable.subscribe({
      next: (response: any) => {
        this.isLoading = false;
        console.log('Report uploaded successfully:', response);
        
        // Afficher un message de succès personnalisé selon le type
        const successMessage = this.data.isResubmission 
          ? 'Rapport re-soumis avec succès!'
          : 'Rapport soumis avec succès!';
          
        this.snackBar.open(successMessage, 'Fermer', {
          duration: 3000
        });
        
        this.dialogRef.close(response);
      },
      error: (error: any) => {
        this.isLoading = false;
        console.error('Error uploading report:', error);
        
        let errorMessage = 'Une erreur est survenue lors du téléversement du rapport';
        if (error.error?.message) {
          errorMessage = error.error.message;
        } else if (error.status === 400) {
          errorMessage = 'Données invalides. Vérifiez le fichier et les informations saisies.';
        } else if (error.status === 413) {
          errorMessage = 'Le fichier est trop volumineux.';
        } else if (error.status === 415) {
          errorMessage = 'Type de fichier non supporté. Utilisez un fichier PDF.';
        }
        
        this.errorMessage = errorMessage;
        this.snackBar.open(errorMessage, 'Fermer', {
          duration: 5000
        });
      }
    });
  }

  onCancel(): void {
    this.dialogRef.close();
  }

  // Méthodes utilitaires pour l'affichage
  getFileIcon(): string {
    if (this.reportType) {
      return this.reportType.iconClass;
    }
    return 'fa-file-pdf';
  }

  getTypeColor(): string {
    if (this.reportType) {
      return this.reportType.color;
    }
    return '#007bff';
  }

  getExpectedDeadline(): string | null {
    if (this.reportType && this.reportType.daysFromStart !== undefined) {
      const days = this.reportType.daysFromStart;
      if (days < 0) {
        return `À soumettre ${Math.abs(days)} jour(s) avant le début du stage`;
      } else if (days === 0) {
        return 'À soumettre le jour du début du stage';
      } else {
        return `À soumettre ${days} jour(s) après le début du stage`;
      }
    }
    return null;
  }

  shouldShowAutoGeneratedWarning(): boolean {
    return this.isAutoGeneratedReport() && !this.data.isResubmission;
  }
}