// services/ReportType/report-type.service.ts
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError, tap, map } from 'rxjs/operators';
import { environment } from '../../../environments/environment';
import { isPlatformBrowser } from '@angular/common';

export interface ReportType {
  id: number;
  name: string;
  description: string;
  displayOrder: number;
  daysFromStart: number;
  isAutoGenerated: boolean;
  isActive: boolean;
  iconClass: string;
  color: string;
  createdAt: Date;
  updatedAt?: Date;
}

export interface CreateReportType {
  name: string;
  description: string;
  displayOrder: number;
  daysFromStart: number;
  isAutoGenerated?: boolean;
  isActive?: boolean;
  iconClass?: string;
  color?: string;
}

export interface UpdateReportType {
  name: string;
  description: string;
  displayOrder: number;
  daysFromStart: number;
  isAutoGenerated: boolean;
  isActive: boolean;
  iconClass: string;
  color: string;
}

@Injectable({
  providedIn: 'root'
})
export class ReportTypeService {
  private apiUrl = `${environment.apiUrl}/api/reporttypes`;
  private isBrowser: boolean;
  
  // Cache pour les types de rapports
  private reportTypesSubject = new BehaviorSubject<ReportType[]>([]);
  public reportTypes$ = this.reportTypesSubject.asObservable();
  
  constructor(
    private http: HttpClient,
    @Inject(PLATFORM_ID) private platformId: any
  ) {
    this.isBrowser = isPlatformBrowser(this.platformId);
    this.loadReportTypes(); // Charger automatiquement au démarrage
  }

  // Headers HTTP avec token d'authentification
  private getHeaders(): HttpHeaders {
    let headers = new HttpHeaders().set('Content-Type', 'application/json');
    if (this.isBrowser) {
      const token = localStorage.getItem('auth_token');
      if (token) {
        headers = headers.set('Authorization', `Bearer ${token}`);
      }
    }
    return headers;
  }

  /**
   * Récupère tous les types de rapports
   */
  getAllReportTypes(): Observable<ReportType[]> {
    return this.http.get<ReportType[]>(`${this.apiUrl}`, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(reportTypes => {
        // Mettre à jour le cache
        this.reportTypesSubject.next(reportTypes);
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Récupère seulement les types de rapports actifs
   */
  getActiveReportTypes(): Observable<ReportType[]> {
    return this.http.get<ReportType[]>(`${this.apiUrl}/active`, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(reportTypes => {
        // Mettre à jour le cache seulement si on n'a pas encore de données
        if (this.reportTypesSubject.value.length === 0) {
          this.reportTypesSubject.next(reportTypes);
        }
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Récupère un type de rapport par son ID
   */
  getReportTypeById(id: number): Observable<ReportType> {
    return this.http.get<ReportType>(`${this.apiUrl}/${id}`, { 
      headers: this.getHeaders() 
    }).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * Crée un nouveau type de rapport (pour les RH/Admin)
   */
  createReportType(reportType: CreateReportType): Observable<ReportType> {
    return this.http.post<ReportType>(`${this.apiUrl}`, reportType, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(() => {
        // Recharger la liste après création
        this.loadReportTypes();
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Met à jour un type de rapport (pour les RH/Admin)
   */
  updateReportType(id: number, reportType: UpdateReportType): Observable<ReportType> {
    return this.http.put<ReportType>(`${this.apiUrl}/${id}`, reportType, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(() => {
        // Recharger la liste après mise à jour
        this.loadReportTypes();
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Supprime un type de rapport (pour les RH/Admin)
   */
  deleteReportType(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(() => {
        // Recharger la liste après suppression
        this.loadReportTypes();
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Réorganise l'ordre d'affichage d'un type de rapport
   */
  reorderReportType(id: number, newDisplayOrder: number): Observable<any> {
    return this.http.post(`${this.apiUrl}/${id}/reorder`, { 
      newDisplayOrder 
    }, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(() => {
        // Recharger la liste après réorganisation
        this.loadReportTypes();
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Initialise les types de rapports par défaut (pour les Admin)
   */
  initializeDefaultReportTypes(): Observable<any> {
    return this.http.post(`${this.apiUrl}/initialize-defaults`, {}, { 
      headers: this.getHeaders() 
    }).pipe(
      tap(() => {
        // Recharger la liste après initialisation
        this.loadReportTypes();
      }),
      catchError(this.handleError)
    );
  }

  /**
   * Méthodes utilitaires pour le cache
   */
  
  // Charge les types de rapports et met à jour le cache
  private loadReportTypes(): void {
    this.getActiveReportTypes().subscribe({
      next: (reportTypes) => {
        console.log('Types de rapports chargés:', reportTypes);
      },
      error: (error) => {
        console.error('Erreur lors du chargement des types de rapports:', error);
      }
    });
  }

  // Obtient les types de rapports depuis le cache
  getCachedReportTypes(): ReportType[] {
    return this.reportTypesSubject.value;
  }

  // Trouve un type de rapport par ID dans le cache
  findReportTypeById(id: number): ReportType | undefined {
    return this.reportTypesSubject.value.find(rt => rt.id === id);
  }

  // Trouve un type de rapport par nom dans le cache  
  findReportTypeByName(name: string): ReportType | undefined {
    return this.reportTypesSubject.value.find(rt => rt.name.toLowerCase() === name.toLowerCase());
  }

  // Gestion d'erreur générique
  private handleError(error: any) {
    console.error('Erreur ReportTypeService:', error);
    return throwError(() => error);
  }

  /**
   * Méthodes utilitaires pour la compatibilité avec l'ancien système
   */
  
  // Convertit l'ancien nom de type vers le nouvel ID
  getReportTypeIdByLegacyName(legacyName: string): number | null {
    const mapping: { [key: string]: string } = {
      'ConventionStage': 'Convention de stage',
      'PlanTravail': 'Plan de travail',
      'JournalBord': 'Journal de bord (1ère partie)',
      'BilanVersion1': 'Les maquettes',
      'RestitutionOrale': 'Présentation mi-terme',
      'VisiteMiParcours': 'Journal de bord (2ème partie)',
      'BilanVersion2': 'Captures d\'interfaces',
      'RapportFinal': 'Rapport final'
    };

    const newName = mapping[legacyName];
    if (newName) {
      const reportType = this.findReportTypeByName(newName);
      return reportType ? reportType.id : null;
    }
    return null;
  }

  // Obtient le nom d'affichage d'un type par son ID
  getReportTypeDisplayName(id: number): string {
    const reportType = this.findReportTypeById(id);
    return reportType ? reportType.name : `Type ${id}`;
  }

  // Obtient l'icône d'un type par son ID
  getReportTypeIcon(id: number): string {
    const reportType = this.findReportTypeById(id);
    return reportType ? reportType.iconClass : 'fa-file';
  }

  // Obtient la couleur d'un type par son ID
  getReportTypeColor(id: number): string {
    const reportType = this.findReportTypeById(id);
    return reportType ? reportType.color : '#007bff';
  }
}